{"version":3,"sources":["context/TodoListContext.js","components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoListContext","createContext","TodoListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","todos","setTodos","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTodo","title","id","uuidv4","removeTodo","filter","todo","clearList","findItem","item","find","editTodo","newTodos","map","children","Todo","useContext","onClick","className","TodoList","length","key","TodoForm","setTitle","onSubmit","e","preventDefault","type","placeholder","required","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAIaA,EAAkBC,0BA4ChBC,EA1CiB,SAACC,GAE7B,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAF3B,EAIbC,mBAASL,GAJI,mBAIhCM,EAJgC,KAIzBC,EAJyB,OAMPF,mBAAS,MANF,mBAMhCG,EANgC,KAMtBC,EANsB,KAQvCC,qBAAU,WACNP,aAAaQ,QAAQ,QAASV,KAAKW,UAAUN,MAC9C,CAACA,IAyBJ,OACI,kBAACV,EAAgBiB,SAAjB,CAA0BC,MAAO,CAAER,QAAOS,QAxB9B,SAACC,GACbT,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEU,QAAOC,GAAIC,mBAuBkBC,WApBpC,SAAAF,GACfV,EAASD,EAAMc,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,KAAOA,OAmBqBK,UAhBjD,WACdf,EAAS,KAeiEgB,SAZ7D,SAAAN,GACb,IAAMO,EAAOlB,EAAMmB,MAAK,SAAAJ,GAAI,OAAIA,EAAKJ,KAAOA,KAC5CR,EAAYe,IAUwEhB,WAAUkB,SAPjF,SAACV,EAAOC,GACrB,IAAMU,EAAWrB,EAAMsB,KAAI,SAAAP,GAAI,OAAKA,EAAKJ,KAAOA,EAAK,CAACD,QAAOC,MAAMI,KACnEd,EAASoB,GACTlB,EAAY,SAKPV,EAAM8B,WCrBJC,EAnBF,SAAC,GAAc,IAAZT,EAAW,EAAXA,KAAW,EAEUU,qBAAWnC,GAApCuB,EAFe,EAEfA,WAAYI,EAFG,EAEHA,SAEpB,OACI,4BACI,8BAAOF,EAAKL,OACZ,6BACI,4BAAQgB,QAAS,kBAAMb,EAAWE,EAAKJ,MACnC,uBAAGgB,UAAU,mBAEjB,4BAAQD,QAAS,kBAAMT,EAASF,EAAKJ,MACjC,uBAAGgB,UAAU,qBCQlBC,EAnBE,WAAO,IAEZ5B,EAAUyB,qBAAWnC,GAArBU,MAER,OACI,6BACKA,EAAM6B,OACH,4BACK7B,EAAMsB,KAAI,SAAAP,GACP,OAAO,kBAAC,EAAD,CAAMA,KAAMA,EAAMe,IAAKf,EAAKJ,SAI3C,yBAAKgB,UAAU,SAAf,cCyBDI,EAvCE,WAAO,IAAD,EAEgCN,qBAAWnC,GAAtDmB,EAFW,EAEXA,QAASO,EAFE,EAEFA,UAAWd,EAFT,EAESA,SAAUkB,EAFnB,EAEmBA,SAFnB,EAIOrB,mBAAS,IAJhB,mBAIZW,EAJY,KAILsB,EAJK,KA4BnB,OARA5B,qBAAU,WAEF4B,EADY,OAAb9B,EACUA,EAASQ,MAET,MAEd,CAACR,IAGA,0BAAM+B,SAnBW,SAAAC,GACjBA,EAAEC,iBACEjC,EAIAkB,EAASV,EAAOR,EAASS,KAHzBF,EAAQC,GACRsB,EAAS,OAgBT,2BAAOI,KAAK,OAAOC,YAAY,cAAcC,UAAQ,EAAC9B,MAAOE,EAAO6B,SAxBvD,SAAAL,GACjBF,EAASE,EAAEM,OAAOhC,UAwBd,6BACI,4BAAQ4B,KAAK,UAAUlC,EAAW,YAAc,YAChD,4BAAQwB,QAASV,GAAjB,YCjBDyB,MAbf,WAEI,OACI,kBAAC,EAAD,KACI,yBAAKd,UAAU,iBACX,yCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDIe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c0ac8125.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { v4 as uuidv4} from \"uuid\";\r\n\r\n\r\nexport const TodoListContext = createContext();\r\n\r\nconst TodoListContextProvider = (props) => {\r\n\r\n    const initialState = JSON.parse(localStorage.getItem(\"todos\")) || [];\r\n\r\n    const [todos, setTodos] = useState(initialState);\r\n\r\n    const [editItem, setEditItem] = useState(null);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n    const addTodo = (title) => {\r\n        setTodos([...todos, { title, id: uuidv4() }])\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        setTodos(todos.filter(todo => todo.id !== id))\r\n    }\r\n\r\n    const clearList = () => {\r\n        setTodos([]);\r\n    }\r\n\r\n    const findItem = id => {\r\n        const item = todos.find(todo => todo.id === id);\r\n        setEditItem(item);\r\n    }\r\n\r\n    const editTodo = (title, id) => {\r\n        const newTodos = todos.map(todo => (todo.id === id ? {title, id} : todo));\r\n        setTodos(newTodos);\r\n        setEditItem(null);\r\n    }\r\n\r\n    return (\r\n        <TodoListContext.Provider value={{ todos, addTodo, removeTodo, clearList, findItem, editItem, editTodo }}>\r\n            {props.children}\r\n        </TodoListContext.Provider>\r\n    );\r\n}\r\n \r\nexport default TodoListContextProvider;","import React, { useContext } from 'react'\r\nimport { TodoListContext } from '../context/TodoListContext';\r\n\r\nconst Todo = ({ todo }) => {\r\n\r\n    const { removeTodo, findItem } = useContext(TodoListContext);\r\n\r\n    return (\r\n        <li>\r\n            <span>{todo.title}</span>\r\n            <div>\r\n                <button onClick={() => removeTodo(todo.id)}>\r\n                    <i className=\"fa fa-trash-o\"></i>\r\n                </button>\r\n                <button onClick={() => findItem(todo.id)}>\r\n                    <i className=\"fa fa-pencil\"></i>\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n \r\nexport default Todo;","import React, { useContext } from 'react';\r\nimport { TodoListContext } from '../context/TodoListContext';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = () => {\r\n\r\n    const { todos } = useContext(TodoListContext);\r\n\r\n    return (\r\n        <div>\r\n            {todos.length ? (\r\n                <ul>\r\n                    {todos.map(todo => {\r\n                        return <Todo todo={todo} key={todo.id}/>\r\n                    })}\r\n                </ul>\r\n            ) : (\r\n                <div className=\"empty\">No Todos</div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TodoList;","import React, { useContext, useState, useEffect } from 'react'\r\nimport { TodoListContext } from '../context/TodoListContext';\r\n\r\nconst TodoForm = () => {\r\n\r\n    const { addTodo, clearList, editItem, editTodo } = useContext(TodoListContext);\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    const handleChange = e => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(!editItem) {\r\n            addTodo(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            editTodo(title, editItem.id);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(editItem !== null) {\r\n            setTitle(editItem.title);\r\n        } else {\r\n            setTitle(\"\");\r\n        }\r\n    }, [editItem]);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Add Todo...\" required value={title} onChange={handleChange}/>\r\n            <div>\r\n                <button type=\"submit\">{editItem ? \"Edit Todo\" : \"Add Todo\"}</button>\r\n                <button onClick={clearList}>Clear</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default TodoForm;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport TodoListContextProvider from './context/TodoListContext';\nimport TodoForm from './components/TodoForm';\n\nfunction App() {\n\n    return (\n        <TodoListContextProvider>\n            <div className=\"App container\">\n                <h1>Todo List</h1>\n                <TodoForm />\n                <TodoList />\n            </div>\n        </TodoListContextProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}